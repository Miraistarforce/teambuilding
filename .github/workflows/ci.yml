name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # バックエンドのテストとビルド
  backend:
    name: Backend Test & Build
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=file:./test.db" >> .env
        echo "JWT_SECRET=test-secret-key" >> .env
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Run database migrations
      run: npx prisma migrate dev --name init
    
    - name: TypeScript compile check
      run: npx tsc --noEmit
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run tests
      run: npm test || true
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-dist
        path: backend/dist
    
  # フロントエンド（タイムカードアプリ）のテストとビルド
  frontend-timecard:
    name: Timecard App Test & Build
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./timecard-app
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: timecard-app/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup environment
      run: |
        echo "VITE_API_URL=${{ secrets.API_URL || 'http://localhost:3001/api' }}" > .env
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run tests
      run: npm test -- --run || true
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: timecard-app-dist
        path: timecard-app/dist
    
  # フロントエンド（管理アプリ）のテストとビルド  
  frontend-admin:
    name: Admin App Test & Build
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./store-admin-app
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: store-admin-app/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup environment
      run: |
        echo "VITE_API_URL=${{ secrets.API_URL || 'http://localhost:3001/api' }}" > .env
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run tests
      run: npm test -- --run || true
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: admin-app-dist
        path: store-admin-app/dist
  
  # セキュリティスキャン
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run npm audit - Backend
      working-directory: ./backend
      run: npm audit --audit-level=moderate || true
    
    - name: Run npm audit - Timecard App
      working-directory: ./timecard-app
      run: npm audit --audit-level=moderate || true
    
    - name: Run npm audit - Admin App
      working-directory: ./store-admin-app
      run: npm audit --audit-level=moderate || true
  
  # Dockerイメージのビルド（mainブランチのみ）
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [backend, frontend-timecard, frontend-admin]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: secrets.DOCKER_USERNAME != ''
    
    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/teambuilding-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/teambuilding-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Timecard App
      uses: docker/build-push-action@v4
      with:
        context: ./timecard-app
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/teambuilding-timecard:latest
          ${{ secrets.DOCKER_USERNAME }}/teambuilding-timecard:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Admin App
      uses: docker/build-push-action@v4
      with:
        context: ./store-admin-app
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/teambuilding-admin:latest
          ${{ secrets.DOCKER_USERNAME }}/teambuilding-admin:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max